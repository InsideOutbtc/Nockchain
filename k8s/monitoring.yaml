# Monitoring service deployment for Nockchain mining pool

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nockchain-monitoring
  namespace: nockchain
  labels:
    app: nockchain-monitoring
    component: monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nockchain-monitoring
  template:
    metadata:
      labels:
        app: nockchain-monitoring
        component: monitoring
    spec:
      imagePullSecrets:
        - name: registry-secret
      containers:
        - name: monitoring
          image: ghcr.io/nockchain/mining-pool:latest-monitoring
          ports:
            - containerPort: 3001
              name: http
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: nockchain-config
                  key: NODE_ENV
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: nockchain-secrets
                  key: REDIS_URL
            - name: MONITORING_PORT
              value: "3001"
            - name: MINING_POOL_API_URL
              value: "http://nockchain-web-service:3000"
            - name: SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: nockchain-secrets
                  key: SMTP_USER
            - name: SMTP_PASS
              valueFrom:
                secretKeyRef:
                  name: nockchain-secrets
                  key: SMTP_PASS
            - name: SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: nockchain-secrets
                  key: SLACK_WEBHOOK_URL
            - name: DISCORD_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: nockchain-secrets
                  key: DISCORD_WEBHOOK_URL
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 30
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: nockchain-monitoring-service
  namespace: nockchain
  labels:
    app: nockchain-monitoring
    component: monitoring
spec:
  selector:
    app: nockchain-monitoring
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http
  type: ClusterIP

---
# Prometheus deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: nockchain
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.47.0
          ports:
            - containerPort: 9090
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=30d'
            - '--web.enable-lifecycle'
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: nockchain
  labels:
    app: prometheus
    component: monitoring
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: nockchain
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
# Grafana deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nockchain
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "nockchain123"
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: nockchain
  labels:
    app: grafana
    component: monitoring
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: nockchain
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard