# Production-ready Docker Compose for Nockchain mining pool
# Complete infrastructure with all services and monitoring

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nockchain-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: nockchain
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nockchain123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nockchain

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nockchain-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nockchain

  # Mining Pool Rust Backend
  mining-pool:
    build:
      context: ./apps/mining-pool
      dockerfile: Dockerfile
    container_name: nockchain-mining-pool
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-nockchain123}@postgres:5432/nockchain
      - REDIS_URL=redis://redis:6379
      - POOL_NAME=Nockchain Mining Pool
      - POOL_FEE=1.0
      - BLOCKCHAIN_RPC_URL=https://rpc.nockchain.org
    ports:
      - "8080:8080"  # HTTP API
      - "4444:8081"  # Stratum mining port
      - "9090:9090"  # Metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nockchain

  # Next.js Web Application
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: nockchain-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-nockchain123}@postgres:5432/nockchain
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - NEXTAUTH_URL=http://localhost:3000
      - MINING_POOL_API_URL=http://mining-pool:8080
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mining-pool:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nockchain

  # Monitoring Service
  monitoring:
    build:
      context: ./apps/monitoring
      dockerfile: Dockerfile
    container_name: nockchain-monitoring
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONITORING_PORT=3001
      - REDIS_URL=redis://redis:6379
      - MINING_POOL_API_URL=http://web:3000
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nockchain

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: nockchain-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - web
      - mining-pool
      - monitoring
    networks:
      - nockchain

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: nockchain-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-nockchain123}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - nockchain

  # AlertManager for Notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: nockchain-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./docker/monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    depends_on:
      - prometheus
    networks:
      - nockchain

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: nockchain-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - nockchain

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: nockchain-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - nockchain

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nockchain-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - monitoring
      - grafana
    networks:
      - nockchain

volumes:
  postgres_data:
    name: nockchain_postgres_data
  redis_data:
    name: nockchain_redis_data
  prometheus_data:
    name: nockchain_prometheus_data
  grafana_data:
    name: nockchain_grafana_data
  alertmanager_data:
    name: nockchain_alertmanager_data

networks:
  nockchain:
    driver: bridge
    name: nockchain-network